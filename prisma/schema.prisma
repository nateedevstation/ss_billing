// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum adminRole {
  SUPERADMIN
  ADMIN
}

enum roomSection {
  SS1
  SS2
}



model resident {
  id           Int            @id @default(autoincrement())
  prefix       String
  first_name   String
  last_name    String
  chaya        String
  tel          String
  time_create  DateTime       @default(now())
  time_stamp   DateTime       @default(now())

  // ประวัติการเข้าพักทั้งหมด
  stays        residentStay[]
}

model room {
  id           Int            @id @default(autoincrement())
  section      roomSection
  floor        Int
  room_no      Int
  time_create  DateTime       @default(now())
  time_stamp   DateTime       @default(now())

  // ประวัติผู้เข้าพักทั้งหมดของห้องนี้
  stays        residentStay[]
  metors       roomMeter[]
}

model residentStay {
  id           Int       @id @default(autoincrement())
  residentId   Int
  roomId       Int
  movedInAt    DateTime  @default(now()) // วันที่/เวลาย้ายเข้า
  movedOutAt   DateTime?                 // null = ยังพักอยู่
  note         String?

  resident     resident  @relation(fields: [residentId], references: [id], onDelete: Cascade)
  room         room      @relation(fields: [roomId], references: [id], onDelete: Cascade)

  // ป้องกันการบันทึกซ้ำเวลาเดียวกันของคนเดียวกัน
  @@unique([residentId, movedInAt])

  // ควรมี index สำหรับ query บ่อย ๆ
  @@index([residentId, movedOutAt])
  @@index([roomId, movedOutAt])
}

model meter {
  id Int  @id @default(autoincrement())
  metor_no Int 
  time_create DateTime @default(now())
  time_stamp DateTime @default(now())

  rooms roomMeter[]
}

model roomMeter {
  roomId      Int
  metorId     Int
  installedAt DateTime @default(now())
  removedAt   DateTime?

  room  room  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  metor meter @relation(fields: [metorId], references: [id], onDelete: Cascade)

  @@id([roomId, metorId])
  @@index([roomId, removedAt])
  @@index([metorId, removedAt])
}

